#lang plai

;{+{-{+ 5 5}3}{-{+ 5 5}3}}
;{with{x {+ 5 5}}{with{y {- x 3}}{+ y y}}}

(define-type WAE
  [num (n number?)]
  [add (lhs WAE?)(rhs WAE?)]
  [sub (lhs WAE?)(rhs WAE?)]
  [with (name symbol?)(named-expr WAE?)(body WAE?)]
  [id (name symbol?)])

;[contract] parse: sexp -> WAE
;[purpose] to convert s-expression into WAE
(define (parse sexp)
  (match sexp
    [(? number?) (num sexp)]
    [(list '+ l r) (add (parse l)(parse r))]
    [(list '- l r) (sub (parse l)(parse r))]
    [(list 'with (list i v) e) (with i (parse v)(parse e))]
    [(? symbol?) (id sexp)]
    [else (error 'parse "bad syntax:~a"sexp)]))

(test(parse '{+{- 3 4} 7})(add(sub (num 3)(num 4))(num 7)))
(test(parse '{with{x 5}{+ 8 2}})(with 'x(num 5)(add(num 8)(num 2))))
(test(parse '{with{x 5}{+ x x}})(with 'x(num 5)(add(id 'x)(id 'x))))

(parse '{with {x {+ 5 5}}{+ x x}})

;[contract] subst: WAE symbol number -> WAE
(define (subst wae idtf val)
  (type-case WAE wae
    [num (n) wae]
    [add (l r) (add (subst l idtf val)(subst r idtf val))]
    [sub (l r) (sub (subst l idtf val)(subst r idtf val))]
    [with (i v e) (with i (subst v idtf val)(if(symbol=? i idtf) e
                                                (subst e idtf val)))]
    [id (s) (if(symbol=? s idtf)(num val) wae)]))

(test(subst(with 'y (num 17)(id 'x)) 'x 10)(with 'y (num 17)(num 10)))

;interp: WAE -> number
(define (interp wae)
  (type-case WAE wae
    [num (n) n]
    [add (l r) (+ (interp l)(interp r))]
    [sub (l r) (- (interp l)(interp r))]
    [with (i v e) (interp (subst e i (interp v)))]
    [id (s) (error 'interp "free identifier ~a"s)]))

(test(interp(with 'x (num 5)(add (id 'x)(id 'x)))) 10)
(test(interp(with 'y (num 3)(sub (num 10)(add (id 'y)(num 6))))) 1)