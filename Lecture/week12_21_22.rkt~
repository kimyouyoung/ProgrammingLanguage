#lang plai
;<BFAE> ::= <num>
;         | {+ <BFAE> <BFAE>}
;         | {- <BFAE> <BFAE>}
;         | <id>
;         | {fun {<id} <BFAE>}
;         | {<BFAE> <BFAE>}
;         | {newbox <BFAE>}
;         | {setbox <BFAE> <BFAE>}
;         | {openbox <BFAE>}
;         | {seqn <BFAE> <BFAE>}

(define-type BFAE
  [num (n number?)]
  [add (lhs BFAE?)(rhs BFAE?)]
  [sub (lhs BFAE?)(rhs BFAE?)]
  [id (name symbol?)]
  [fun (param symbol?)(body BFAE?)]
  [newbox (v BFAE?)]
  [setbox (bn BFAE?)(v BFAE?)]
  [openbox (v BFAE?)]
  [seqn (ex1 BFAE?)(ex2 BFAE?)]
  [app (ftn BFAE?)(arg BFAE?)])

(define-type DefrdSub
  [mtSub]
  [aSub (name symbol?)(address integer?)(ds DefrdSub?)])

(define-type Store
  [mtSto]
  [aSto (address integer?)(value BFAE-Value?)(rest Store?)])

(define-type BFAE-Value
  [numV (n number?)]
  [closureV (param symbol?)(body BFAE?)(ds DefrdSub?)]
  [boxV (address integer?)])

(define-type Value*Store
  [v*s (value BFAE-Value?)(store Store?)])

; lookup: symbol DefrdSub -> address
(define (lookup name ds)
  (type-case DefrdSub ds
    [mtSub() (error 'lookup "free identifier")]
    [aSub (i adr saved) (if (symbol=? i name)
                            adr
                            (lookup name saved))]))

; store-lookup address Store -> BFAE-Value
(define (store-lookup address sto)
  (type-case Store sto
    [mtSto() (error 'store-lookup "No value at address")]
    [aStor (location value rest-store)
                   (if (= location address)
                      value
                      (store-lookup address rest-store))]))

; max-address: Store -> Integer
(define (max-address st)
  (type-case Store st
    [mtSto () 0]
    [aSto (n v st)
          (max n (max-address st))]))

; malloc: Store -> Integer
(define (malloc st)
  (+ 1 (max-address st)))

; malloc: Store -> Integer
(define malloc
  (local ([define max-address (box-1)])
         (lambda (store)
           (begin
             (set-box! max-address (+ 1 (unbox max-address)))
             (unbox max-address)))))

; interp: BFAE DefrdSub Store -> Value*Store
(define (interp bfae ds st)
  (type-case BFAE bfae
    [num (n) (v*s (numV n) st)]
    [add (l r) (type-case Value*Store (interp l ds st)
                 [v*s (l-value l-store)
                      (type-case Value*Store (interp r ds l-store)
                        [v*s (r-value r-store)
                             (v*s (num+ l-value r-value)
                                  r-store)])])]
    [sub (l r) (type-case Value*Store (interp l ds st)
                 [v*s (l-value l-store)
                      (type-case Value*Store (interp r ds l-store)
                        [v*s (r-value r-store)
                             (v*s (num- l-value r-value)
                                  r-store)])])]
    [id (s) (v*s (store-lookup (lookup s ds) st) st)]
    [fun (p b) (v*s (closureV p b ds) st)]
    [app (f a) (type-case Value*Store (interp f ds st)
                 [v*s (f-valuev f-store)
                      (type-case Value*Store (interp a ds f-store)
                        [v*s (a-value a-store)
                             (local ([define new-address (malloc a-store)])
                               (interp (closureV-body f-value)
                                       (aSub (closureV-param f-value)
                                             new-address
                                             (closureV-ds f-value))
                                       (aSto new-address
                                             a-value
                                             a-store)))])])]
    [newbox (val)
            (type-case Value*Store (interp val ds st)
              [v*s (v1 st1)
                   (local [(define a (malloc st1))]
                     (v*s (boxV a)
                          (aSto a v1 st1)))])]
    [setbox (bx-expr val-expr)
            (type-case Value*Store (interp bx-expr ds st)
              [v*s (bx-val st2)
                   (type-case Value*Store (interp val-expr ds st2)
                     [v*s (val st3)
                          (v*s val
                               (aSto (boxV-address bx-val)
                                     val
                                     st3))])])]
    [openbox (bx-expr)
             (type-case Value*Store (interp bx-expr ds st)
               [v*s (bx-val st1)
                    (v*s (store-lookup (boxV-address bx-val)
                                       st1)
                         st1)])])

; interp-two: BFAE BFAE DefrdSub Store
;             (Value Value Store -> Value*Store)
;             -> Value*Store
(define (interp-two expr1 expr2 ds st handle)
  (type-case Value*Store (interp expr1 ds st)
    [v*s (val1 st2)
         [type-case Value*Store (interp expr2 ds st2)
           [v*s (val2 st3)
                (handle val1 val2 st3)]]]))
    

(define (run sexp ds st)
  (interp (parse sexp) ds st))

 {with {swap {refun {x} {refun {y} {with {z x} {seqn {setvar x y} {setvar y z}}}}}} {with {a 10} {with {b 20} {seqn {{swap a} b} b}}}}
 {{swap a} b}